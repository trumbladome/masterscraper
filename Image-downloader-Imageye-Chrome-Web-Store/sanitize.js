!function t(r,n,e){function u(i,f){if(!n[i]){if(!r[i]){if(o)return o(i,!0);var c=new Error("Cannot find module '".concat(i,"'"));throw c.code="MODULE_NOT_FOUND",c}var l=n[i]={exports:{}};r[i][0].call(l.exports,(function(t){return u(r[i][1][t]||t)}),l,l.exports,t,r,n,e)}return n[i].exports}for(var o=void 0,i=0;i<e.length;i++)u(e[i]);return u}({1:[function(t,r,n){var e=t("truncate-utf8-bytes"),u=/[\/\?<>\\:\*\|"]/g,o=/[\x00-\x1f\x80-\x9f]/g,i=/^\.+$/,f=/^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i,c=/[\. ]+$/;function l(t,r){if("string"!=typeof t)throw new Error("Input must be string");var n=t.replace(u,r).replace(o,r).replace(i,r).replace(f,r).replace(c,r);return e(n,255)}r.exports=function(t,r){var n=r&&r.replacement||"",e=l(t,n);return""===n?e:l(e,"")}},{"truncate-utf8-bytes":2}],2:[function(t,r,n){var e=t("./lib/truncate"),u=t("utf8-byte-length/browser");r.exports=e.bind(null,u)},{"./lib/truncate":3,"utf8-byte-length/browser":4}],3:[function(t,r,n){function e(t){return t>=55296&&t<=56319}function u(t){return t>=56320&&t<=57343}r.exports=function(t,r,n){if("string"!=typeof r)throw new Error("Input must be string");for(var o,i,f=r.length,c=0,l=0;l<f;l+=1){if(o=r.charCodeAt(l),i=r[l],e(o)&&u(r.charCodeAt(l+1))&&(i+=r[l+=1]),(c+=t(i))===n)return r.slice(0,l+1);if(c>n)return r.slice(0,l-i.length+1)}return r}},{}],4:[function(t,r,n){function e(t){return t>=55296&&t<=56319}function u(t){return t>=56320&&t<=57343}r.exports=function(t){if("string"!=typeof t)throw new Error("Input must be string");for(var r=t.length,n=0,o=null,i=null,f=0;f<r;f++)u(o=t.charCodeAt(f))?null!=i&&e(i)?n+=1:n+=3:o<=127?n+=1:o>=128&&o<=2047?n+=2:o>=2048&&o<=65535&&(n+=3),i=o;return n}},{}],5:[function(t,r,n){self.sanitize=t("sanitize-filename")},{"sanitize-filename":1}]},{},[5]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,