/**
 * ImageAssistant
 * Project Home: http://www.pullywood.com/ImageAssistant/
 * Author: Joey
 * Copyright (C) 2013-2024 普利坞(Pullywood.com)
**/
var dbConfigOps=function(){async function openDatabase(){return new Promise(((resolve,reject)=>{let request=indexedDB.open("IA_db",8);request.onerror=event=>{console.error("Database error: ",event.target.error);reject(event.target.error)};request.onupgradeneeded=event=>{let db=event.target.result;if(!db.objectStoreNames.contains("settings")){db.createObjectStore("settings",{keyPath:"key"})}if(!db.objectStoreNames.contains("tabIdMapper")){let tabIdMapperStore=db.createObjectStore("tabIdMapper",{keyPath:"tabId"});tabIdMapperStore.createIndex("extractorHash","extractorHash",{unique:false});tabIdMapperStore.createIndex("extractorHash_2","extractorHash_2",{unique:false})}if(!db.objectStoreNames.contains("refererRules")){db.createObjectStore("refererRules",{keyPath:"domain"})}if(!db.objectStoreNames.contains("tabInfo")){let tabInfoStore=db.createObjectStore("tabInfo",{keyPath:"tabId"});tabInfoStore.createIndex("extractorHash","extractorHash",{unique:false});tabInfoStore.createIndex("extractorHash_2","extractorHash_2",{unique:false})}if(!db.objectStoreNames.contains("imageData")){let imageDataStore=db.createObjectStore("imageData",{keyPath:"imageUrl"});imageDataStore.createIndex("tabId","tabId",{unique:false});imageDataStore.createIndex("extractorHash","extractorHash",{unique:false})}if(!db.objectStoreNames.contains("pageInfo")){let pageInfoStore=db.createObjectStore("pageInfo",{keyPath:["extractorHash","originalPageUrl"]})}if(!db.objectStoreNames.contains("requestStatus")){db.createObjectStore("requestStatus",{keyPath:"requestId"})}if(!db.objectStoreNames.contains("tabUpdateStatus")){db.createObjectStore("tabUpdateStatus",{keyPath:"tabId"})}if(!db.objectStoreNames.contains("messageQueue")){db.createObjectStore("messageQueue",{autoIncrement:true})}};request.onsuccess=event=>{resolve(event.target.result)}}))}async function saveData(storeName,data){let db=await openDatabase();let transaction=db.transaction([storeName],"readwrite");let objectStore=transaction.objectStore(storeName);return new Promise(((resolve,reject)=>{try{let request=objectStore.put(data);request.onerror=()=>reject(request.error);request.onsuccess=()=>resolve()}catch(e){console.log(e);console.log("######",JSON.stringify(data))}}))}async function getData(storeName,key){let db=await openDatabase();let transaction=db.transaction([storeName],"readonly");let objectStore=transaction.objectStore(storeName);return new Promise(((resolve,reject)=>{let request=objectStore.get(key);request.onerror=()=>reject(request.error);request.onsuccess=()=>resolve(request.result)}))}async function getDataByIndex(storeName,indexName,indexValue){let db=await openDatabase();let transaction=db.transaction([storeName],"readonly");let objectStore=transaction.objectStore(storeName);let index=objectStore.index(indexName);return new Promise(((resolve,reject)=>{let request=index.get(indexValue);request.onerror=()=>reject(request.error);request.onsuccess=()=>resolve(request.result)}))}async function deleteData(storeName,key){let db=await openDatabase();let transaction=db.transaction([storeName],"readwrite");let objectStore=transaction.objectStore(storeName);return new Promise(((resolve,reject)=>{let request=objectStore.delete(key);request.onerror=()=>reject(request.error);request.onsuccess=()=>resolve()}))}async function saveBatchData(storeName,dataArray){let db=await openDatabase();let transaction=db.transaction([storeName],"readwrite");let objectStore=transaction.objectStore(storeName);return new Promise(((resolve,reject)=>{dataArray.forEach((data=>{let request=objectStore.put(data);request.onerror=()=>reject(request.error)}));transaction.oncomplete=()=>resolve();transaction.onerror=()=>reject(transaction.error)}))}async function deleteBatchData(storeName,keys){let db=await openDatabase();let transaction=db.transaction([storeName],"readwrite");let objectStore=transaction.objectStore(storeName);return new Promise(((resolve,reject)=>{keys.forEach((key=>{let request=objectStore.delete(key);request.onerror=()=>reject(request.error)}));transaction.oncomplete=()=>resolve();transaction.onerror=()=>reject(transaction.error)}))}async function executeTransaction(storeNames,transactionCallback){let db=await openDatabase();let transaction=db.transaction(storeNames,"readwrite");return new Promise(((resolve,reject)=>{transactionCallback(transaction);transaction.oncomplete=()=>resolve();transaction.onerror=()=>reject(transaction.error)}))}async function getAllKeys(storeName){let db=await openDatabase();let transaction=db.transaction([storeName],"readonly");let objectStore=transaction.objectStore(storeName);return new Promise(((resolve,reject)=>{let request=objectStore.getAllKeys();request.onerror=()=>reject(request.error);request.onsuccess=()=>resolve(request.result)}))}async function saveTabIdMapper(mappedTab){return saveData("tabIdMapper",mappedTab)}async function getTabIdMapper(tabId){return getData("tabIdMapper",tabId)}async function getTabIdMapperByExtractorHash(extractorHash){return getDataByIndex("tabIdMapper","extractorHash",extractorHash)}async function getTabIdMapperByExtractorHash_2(extractorHash){return getDataByIndex("tabIdMapper","extractorHash_2",extractorHash)}async function deleteTabIdMapper(tabId){return deleteData("tabIdMapper",tabId)}async function saveTabInfo(tabInfo){return saveData("tabInfo",tabInfo)}async function getTabInfoByQuery(query){return getDataByIndex("tabInfo",query.index,query.value)}async function deleteTabInfo(tabId){return deleteData("tabInfo",tabId)}async function saveImageData(imageData){return saveData("imageData",imageData)}async function getImageDataByQuery(query){return getDataByIndex("imageData",query.index,query.value)}async function deleteImageData(imageUrl){return deleteData("imageData",imageUrl)}async function savePageInfo(pageInfo){return saveData("pageInfo",pageInfo)}async function getPageInfoByQuery(query){return getData("pageInfo",[query.extractorHash,query.originalPageUrl])}async function saveSetting(key,value){return saveData("settings",{key:key,value:value})}async function readSetting(key){let result=await getData("settings",key);return result?result.value:undefined}async function saveRequestStatus(requestId,status){return saveData("requestStatus",status)}async function getRequestStatus(requestId){return getData("requestStatus",requestId)}async function deleteRequestStatus(requestId){return deleteData("requestStatus",requestId)}async function getAllRequestStatuses(){let db=await openDatabase();let transaction=db.transaction(["requestStatus"],"readonly");let objectStore=transaction.objectStore("requestStatus");return new Promise(((resolve,reject)=>{let request=objectStore.getAll();request.onerror=()=>reject(request.error);request.onsuccess=()=>resolve(request.result)}))}async function saveTabUpdateStatus(tabId,status){return saveData("tabUpdateStatus",status)}async function getTabUpdateStatus(tabId){return getData("tabUpdateStatus",tabId)}async function deleteTabUpdateStatus(tabId){return deleteData("tabUpdateStatus",tabId)}async function clearRequestStatus(){let db=await openDatabase();let transaction=db.transaction(["requestStatus"],"readwrite");let objectStore=transaction.objectStore("requestStatus");return new Promise(((resolve,reject)=>{let request=objectStore.clear();request.onerror=()=>reject(request.error);request.onsuccess=()=>resolve()}))}async function clearTabUpdateStatus(){let db=await openDatabase();let transaction=db.transaction(["tabUpdateStatus"],"readwrite");let objectStore=transaction.objectStore("tabUpdateStatus");return new Promise(((resolve,reject)=>{let request=objectStore.clear();request.onerror=()=>reject(request.error);request.onsuccess=()=>resolve()}))}var refererRuleOps={async saveRule(domain,referer,updateTime){let rule={domain:domain,referer:referer,updateTime:updateTime};return saveData("refererRules",rule)},async getRule(domain){return getData("refererRules",domain)},async deleteRule(domain){return deleteData("refererRules",domain)},async getAllRules(){let keys=await getAllKeys("refererRules");let rules=await Promise.all(keys.map((key=>getData("refererRules",key))));return rules}};async function enqueueMessage(message){await saveData("messageQueue",{messageType:message.type,messageContent:message})}async function dequeueMessage(){let messages=await getAllKeys("messageQueue");if(messages.length>0){let messageKey=messages[0];let message=await getData("messageQueue",messageKey);await deleteData("messageQueue",messageKey);return{key:messageKey,data:message}}return null}return{getAllKeys:getAllKeys,saveSetting:saveSetting,readSetting:readSetting,saveTabIdMapper:saveTabIdMapper,getTabIdMapper:getTabIdMapper,getTabIdMapperByExtractorHash:getTabIdMapperByExtractorHash,getTabIdMapperByExtractorHash_2:getTabIdMapperByExtractorHash_2,deleteTabIdMapper:deleteTabIdMapper,saveTabInfo:saveTabInfo,getTabInfoByQuery:getTabInfoByQuery,deleteTabInfo:deleteTabInfo,saveImageData:saveImageData,getImageDataByQuery:getImageDataByQuery,deleteImageData:deleteImageData,savePageInfo:savePageInfo,getPageInfoByQuery:getPageInfoByQuery,saveBatchData:saveBatchData,deleteBatchData:deleteBatchData,executeTransaction:executeTransaction,saveRequestStatus:saveRequestStatus,getRequestStatus:getRequestStatus,deleteRequestStatus:deleteRequestStatus,getAllRequestStatuses:getAllRequestStatuses,saveTabUpdateStatus:saveTabUpdateStatus,getTabUpdateStatus:getTabUpdateStatus,deleteTabUpdateStatus:deleteTabUpdateStatus,clearRequestStatus:clearRequestStatus,clearTabUpdateStatus:clearTabUpdateStatus,refererRuleOps:refererRuleOps,enqueueMessage:enqueueMessage,dequeueMessage:dequeueMessage}}();